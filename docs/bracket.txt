   0 10 3210
          

Teams   PICKS
Round     0 
t1             
t2        1

t3            
t4        1

t1        0  
t2         

t3        0 
t4         

points_per_round = 1
game = 0 to 1
score = score + (1 - (((picks & (game+1)) >> game) ^ ((actual & (game+1)) >> game))) * points_per_round
score = score + (((picks & (game+2)) >> game) == ((actual & (game+2)) >> game) * points_per_round

Round     0
        
Team    T M B
:t1     0 0 0 
:t2     1 0 1
:t3     2 1 0
:t4     3 1 1
:t5     4 2 0
:t6     5 2 1
:t7     6 3 0
:t8     7 3 1

bit widths
00000000 0000 00 0
12345678 9012 34 5 = 15
15 * 4 = 60
final 4:
00 0
63 bits
0 00 0000 00000000 0000000000000000 00000000000000000000000000000000
1 23 4567 89012345 6789012345678901 23456789012345678901234567890123
            1          2         3          4         5         6


0b100000000001000000000000010000000000000000000100000000000000000




given 


t1 t2 t3 t4 t5 t6 t7 t8
  0     1     1     1
     0           

results: -01110
 played: 101111

 offset of game number n in round r:
   teams: 16: 0 10 3210 76543210
   r0:  0 + n
   r1:  8 + n  (8 + 0)  = 0 + 2^3
   r2: 12 + n  (4 + 8 + 0) = 0 + 2^3 + 2^2
   r3: 14 + n  (2 + 4 + 8 + 0) = 0 + 2^3 + 2^2 + 2^1

   2*2*2 + 2*2 + 2
   2(2*2 + 2 + 1)
   2(2(2+1) + 1)


           x

is team tX alive?:
  team_number = @teams.index(tX)
  win_number = 0
  results_number = 0
  match_base = 0
  r = 0 up to R
    team_bit = team_number % 2
    match_number = match_base + team_number / 2
    results_number |= (((results >> match_number) & 1) << r)
    win_number |= (team_bit << r)
    match_base += games_in_round(r)
    team_number /= 2

score     8 team bracket: 
          game         0     1     2     3     0     1     0
  results 1 11 1001  t2>t1,t3>t4,t5>t6,t8>t7 t3>t2,t8>t5 t8>t3 t8

1 picks   0 00 0000  t1>t2,t3>t4,t5>t6,t7>t8 t1>t3,t5>t7 t1>t5 t1
2 picks   0 00 0001  t2>t1,t3>t4,t5>t6,t7>t8 t2>t3,t5>t7 t2>t5 t2
3 picks   0 00 0010  t1>t2,t4>t3,t5>t6,t7>t8 t1>t4,t5>t7 t1>t5 t1
4 picks   0 01 0100  t1>t2,t3>t4,t6>t5,t7>t8 t3>t1,t6>t7 t3>t6 t3
5 picks   0 00 1000  t1>t2,t3>t4,t5>t6,t8>t7 t1>t3,t5>t8 t1>t5 t1
6 picks   0 00 1001  t2>t1,t3>t4,t5>t6,t8>t7 t2>t3,t5>t8 t2>t5 t2
7 picks   0 11 0000  t1>t2,t3>t4,t5>t6,t7>t8 t3>t1,t7>t5 t3>t7 t3
8 picks   0 10 0110  t1>t2,t4>t3,t6>t5,t7>t8 t1>t4,t7>t6 t1>t7 t1
9 picks   1 01 1010  t1>t2,t4>t3,t5>t6,t8>t7 t4>t1,t5>t8 t5>t4 t5
A picks   0 10 1110  t1>t2,t4>t3,t6>t5,t8>t7 t1>t4,t8>t6 t1>t8 t1

round 0: 00 ^ 01 = 01   number of zeros gives number correct, number of ones gives number wrong

round 1:
    1    00 0000  00 00   none right
    4    01 0100  00 10   one right 
    7    11 0000  10 10   one right 
    8    10 0110  10 01   none right
    A    10 1110  11 01   one right
    R    11 1001  11 10
         11 1-1-

t54 = 53                1            3         2         1 
                   5432109876543210 00987654321098765432109876543210 
0 10 1010 10101010 1010101010101010 10100111100111101100110000101110

4/2/15: 50,000 bracket scores in 1.87 seconds = 26747 scores/sec
        Before any games played, there are 2^64 - 1 possible outcomes = 18446744073709551615
        Assume N=50 entrants
        To precalculate all possibilites, time t required is:

        t = N * (2**64 - 1) / 26,747 / 86400 / 365 = 1,092,655,914 years!

        after 1 game played:
        t = N * (2**63 - 1) / 26,757 / 86400 / 365 = 546,532,138 years etc

        once we are down to 24 teams left, this becomes ~523 minutes or ~8.7 hours

        To be able to precalc all possibilites after the first round, you'd need about 2,200 hours. Divide it up
        between 1,000 cores and it is doable!

4/7/15: How to determine how many games correct in rounds 1 through N without looping

in round 0, this is easy:  result: 0010010111
                             pick: 1010110001

                             just xor and subtract number of bits from number of games, that gives you number correct:
                              xor: 1000100110  -> number correct = 10 - 4 = 6

in round 1, it is harder, we are dealing with pairs of bits:
                            game: 0  1  2  3 
                          result: 00 10 01 11
                            pick: 01 10 10 01  
                             xor: 01 00 11 10  number correct is number of pairs of 00, starting at even positions. How do we count this?

                          result: 00 10 01 11
                            pick: 01 10 11 10  
                             xor: 01 00 10 01  number correct is number of pairs of 00, starting at even positions. How do we count this?

